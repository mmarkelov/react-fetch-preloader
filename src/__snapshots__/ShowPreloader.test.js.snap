// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ShowPreloader should render correctly with all props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ShowPreloader
    duration={500}
    errored={[Function]}
    fetch={
      [MockFunction] {
        "calls": Array [
          Array [
            "prev_url",
          ],
          Array [
            "new_url",
          ],
          Array [
            "https://randomuser.me/api/?results=10",
          ],
          Array [
            "https://randomuser.me/api/?results=10",
          ],
          Array [
            undefined,
          ],
          Array [
            "https://randomuser.me/api/?results=10",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
        ],
      }
    }
    loaded={[Function]}
    preloader={[Function]}
    url="https://randomuser.me/api/?results=10"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
